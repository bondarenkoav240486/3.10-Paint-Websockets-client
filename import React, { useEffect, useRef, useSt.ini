import React, { useEffect, useRef, useState } from 'react';
import { observer } from "mobx-react-lite";
import canvasState from "../store/canvasState";
import toolState from "../store/toolState";
import Brush from "../tools/Brush";
import strokeStyleState from "../store/strokeStyleState";
import Rect from "../tools/Rect";
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import Modal from '@mui/material/Modal';
import { useParams } from "react-router-dom";
import axios from 'axios';

// Стилі для модального вікна
const style = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    bgcolor: 'background.paper',
    border: '2px solid #000',
    boxShadow: 24,
    p: 4,
};

const Canvas = observer(() => {
    // Стан модального вікна
    const [open, setOpen] = React.useState(true);
    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    // Реф для текстового поля вводу імені користувача
    const usernameRef = useRef();

    // Параметри з URL
    const params = useParams();

    // Реф для канвасу
    const canvasRef = useRef();

    // Завантаження зображення при первинному рендері
    useEffect(() => {
        canvasState.setCanvas(canvasRef.current); // Налаштування канвасу у глобальному стані
        let ctx = canvasRef.current.getContext('2d');
        axios.get(`http://localhost:5000/image?id=${params.id}`)
            .then(response => {
                const img = new Image();
                img.src = response.data; // Завантаження зображення з сервера
                img.onload = () => {
                    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // Очищення канвасу
                    ctx.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height); // Малювання зображення на канвасі
                }
            })
            .catch(error => {
                console.error('Error loading image:', error); // Обробка помилок
                console.log('Error loading image:', error.message);
            });
    }, [params.id]); // Залежність від id

    // Налаштування WebSocket при зміні імені користувача
    useEffect(() => {
        if (canvasState.username) {
            const socket = new WebSocket(`ws://localhost:5000/`);
            canvasState.setSocket(socket);
            canvasState.setSessionId(params.id);
            toolState.setTool(new Brush(canvasRef.current, strokeStyleState.strokeStyle, socket, params.id));
            
            socket.onopen = () => {
                console.log('Подключение установлено');
                socket.send(JSON.stringify({
                    id: params.id,
                    username: canvasState.username,
                    method: "connection"
                }));
            };
            
            socket.onmessage = (event) => {
                let msg = JSON.parse(event.data);
                switch (msg.method) {
                    case "connection":
                        console.log(`пользователь ${msg.username} присоединился`);
                        break;
                    case "draw":
                        drawHandler(msg); // Обробка малювання
                        break;
                }
            };
            
            return () => {
                socket.close(); // Закриття з'єднання при розмонтуванні компонента
            };
        }
    }, [canvasState.username, params.id]); // Залежності: ім'я користувача та id

    // Обробка подій натискання миші
    const mouseDownHandler = () => {
        canvasState.pushToUndo(canvasRef.current.toDataURL()); // Збереження поточного стану для undo
        axios.post(`http://localhost:5000/image?id=${params.id}`, { img: canvasRef.current.toDataURL() }) // Надсилання даних зображення на сервер
            .then(response => console.log(response.data))
            .catch(error => console.error('Error uploading image:', error)); // Обробка помилок
    };

    // Обробка підключення користувача
    const connectHandler = () => {
        canvasState.setUsername(usernameRef.current.value); // Збереження імені користувача у глобальному стані
        setOpen(false); // Закриття модального вікна
    };

    // Обробка малювання на канвасі за допомогою отриманих даних
    const drawHandler = (msg) => {
        const figure = msg.figure;
        const ctx = canvasRef.current.getContext('2d');
        switch (figure.type) {
            case "brush":
                Brush.draw(ctx, figure.x, figure.y); // Малювання пензлем
                break;
            case "rect":
                Rect.staticDraw(ctx, figure.x, figure.y, figure.width, figure.height, figure.color); // Малювання прямокутника
                break;
            case "finish":
                ctx.beginPath(); // Завершення малювання
                break;
        }
    };

    return (
        <div className="canvas">
            <Button onClick={handleOpen}>Open modal</Button>
            <Modal
                open={open}
                onClose={handleClose}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={style}>
                    <Typography id="modal-modal-title" variant="h6" component="h2">
                        Введіть ваше ім'я
                    </Typography>
                    <input type="text" ref={usernameRef} /> {/* Поле для вводу імені */}
                    <Button onClick={connectHandler}>Enter</Button>
                </Box>
            </Modal>
            <canvas
                width={300}
                height={400}
                ref={canvasRef}
                onMouseDown={mouseDownHandler} // Обробка подій натискання миші
                onTouchStart={mouseDownHandler} // Обробка подій дотику
            >
            </canvas>
        </div>
    );
});

export default Canvas;
